{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this$props","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","React","createElement","id","concat","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","_step2","nodes","_iterator2","_createForOfIteratorHelper","s","n","done","_step3","_iterator3","node","push","err","e","f","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","_step","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","_iterator","previousNode","PathfindingVisualizer","_this","call","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","_this2","_loop","i","setTimeout","animateShortestPath","v","document","getElementById","_ret","_loop2","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","_this3","_this$state","Fragment","onClick","visualizeDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","_objectSpread","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.479e2147.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}